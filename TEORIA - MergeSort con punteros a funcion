#include <iostream>
#include <vector>

using namespace std;

template <class T>
bool ASC(T a, T b) {
    return a < b;
}

template <class T>
bool DESC(T a, T b) {
    return a > b;
}

template <class T>
class MergeSort {
private:
    vector<T>& vect;
    bool (*comp)(T, T);

public:
    MergeSort(vector<T>& vect, bool (*comp)(T, T)) : vect(vect), comp(comp) {}

    vector<T> Ordenar(const vector<T>& A, const vector<T>& B) {
        vector<T> ret;
        size_t lonA = A.size();
        size_t lonB = B.size();
        size_t i = 0, j = 0;

        while (i < lonA && j < lonB) {
            if (comp(A[i], B[j])) {
                ret.push_back(A[i]);
                i++;
            } else {
                ret.push_back(B[j]);
                j++;
            }
        }

        while (i < lonA) {
            ret.push_back(A[i]);
            i++;
        }
        while (j < lonB) {
            ret.push_back(B[j]);
            j++;
        }

        return ret;
    }

    vector<T> Sort(vector<T>& vec) {
        size_t lon = vec.size();
        if (lon <= 1) return vec;

        vector<T> izq(vec.begin(), vec.begin() + lon / 2);
        vector<T> der(vec.begin() + lon / 2, vec.end());

        return Ordenar(Sort(izq), Sort(der));
    }

    vector<T> Sort() {
        return Sort(vect);
    }
};

int main() {
    vector<int> datos = {38, 27, 43, 3, 9, 82, 10};

    MergeSort<int> mergeSortAsc(datos, ASC<int>);
    vector<int> ordenadoAsc = mergeSortAsc.Sort();
    cout << "Orden Ascendente: ";
    for (int x : ordenadoAsc) {
        cout << x << " ";
    }
    cout << endl;


    MergeSort<int> mergeSortDesc(datos, DESC<int>);
    vector<int> ordenadoDesc = mergeSortDesc.Sort();
    cout << "Orden Descendente: ";
    for (int x : ordenadoDesc) {
        cout << x << " ";
    }
    cout << endl;

    return 0;
}
